"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addTransactionToDB = exports.createTransaction = exports.convertCurrency = void 0;
const uniqid_1 = __importDefault(require("uniqid"));
const commission_rules_config_1 = require("../../commission_rules.config");
const index_1 = require("../api/index");
const index_2 = require("../../database/index");
const commision_1 = require("./commision");
function convertCurrency(currency, amount) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const getRates = yield (0, index_1.getApiRequest)("https://api.exchangerate.host/2021-01-01");
            const rate = getRates.data.rates[currency];
            if (!rate)
                throw new Error("No rate available");
            // Amount divided with the rate will return the amount in the specified currency, Euro in this case.
            return amount / rate;
        }
        catch (e) {
            throw new Error("Something went wrong");
        }
    });
}
exports.convertCurrency = convertCurrency;
function createTransaction(transaction, clientID, amount) {
    // Adding the transaction to the local database with a unqiue ID, this would actually be generated by the database for the document in the specific colleciton
    const generateIDForTransaction = (0, uniqid_1.default)();
    // Calculate the commission fee
    const commissionFee = (0, commision_1.calculateCommision)(clientID, amount);
    // Transaction is created now, so we create a new date
    const transactionDate = new Date();
    const newTransaction = {
        transactionDate,
        clientID,
        transactionID: generateIDForTransaction,
        transaction: {
            currency: transaction.transactionCurrency,
            amount: transaction.transactionAmount,
        },
        commission: {
            currency: commission_rules_config_1.currencyUsed,
            amount: commissionFee,
        },
    };
    addTransactionToDB(newTransaction);
    return newTransaction;
}
exports.createTransaction = createTransaction;
function addTransactionToDB(transaction) {
    index_2.transactions.push(transaction);
}
exports.addTransactionToDB = addTransactionToDB;
