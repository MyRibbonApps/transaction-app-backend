import uniqid from "uniqid";

import transaction_interface from "../../ts/interfaces/transaction_interface";
import { currencyUsed } from "../../commission_rules.config";

import { getApiRequest } from "../api/index";
import { transactions } from "../../database/index";
import { calculateCommision } from "./commision";
import Transaction from "../../ts/interfaces/transaction_interface";

export async function convertCurrency(currency: string, amount: number): Promise<number> {
  try {
    const getRates = await getApiRequest("https://api.exchangerate.host/2021-01-01");
    const rate: number = getRates.data.rates[currency];
    if (!rate) throw new Error("No rate available");
    // Amount divided with the rate will return the amount in the specified currency, Euro in this case.
    return amount / rate;
  } catch (e) {
    throw new Error("Something went wrong");
  }
}

export function createTransaction(transaction: any, clientID: number, amount: number): transaction_interface {
  // Adding the transaction to the local database with a unqiue ID, this would actually be generated by the database for the document in the specific colleciton
  const generateIDForTransaction = uniqid();
  // Calculate the commission fee
  const commissionFee = calculateCommision(clientID, amount);
  // Transaction is created now, so we create a new date
  const transactionDate = new Date();
  const newTransaction: transaction_interface = {
    transactionDate,
    clientID,
    transactionID: generateIDForTransaction,
    transaction: {
      currency: transaction.transactionCurrency,
      amount: transaction.transactionAmount,
    },
    commission: {
      currency: currencyUsed,
      amount: commissionFee,
    },
  };
  addTransactionToDB(newTransaction);
  return newTransaction;
}

export const findTransaction = (transactionID: string): Transaction | undefined => {
  return transactions.find((transaction) => transaction.transactionID === transactionID);
};

export function addTransactionToDB(transaction: transaction_interface): void {
  transactions.push(transaction);
}
